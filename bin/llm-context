#!/usr/bin/env python3

import os
import argparse
from pathlib import Path

import pathspec

def load_gitignore_patterns(base_path):
    patterns = []
    local_gitignore = Path(base_path) / '.gitignore'
    global_gitignore = Path.home() / '.bin' / 'dotfiles' / '.gitignore_global'

    for ignore_file in [local_gitignore, global_gitignore]:
        if ignore_file.is_file():
            with open(ignore_file, 'r') as f:
                patterns.extend(f.readlines())

    return pathspec.PathSpec.from_lines('gitwildmatch', patterns)

def generate_file_structure(base_path, spec):
    lines = []
    for root, dirs, files in os.walk(base_path):
        rel_root = os.path.relpath(root, base_path)
        rel_root = '.' if rel_root == '.' else rel_root + '/'

        dirs[:] = [d for d in dirs if not spec.match_file(os.path.join(rel_root, d))]
        files = [f for f in files if not spec.match_file(os.path.join(rel_root, f))]

        level = root.replace(base_path, '').count(os.sep)
        indent = '  ' * level
        lines.append(f"{indent}- `{os.path.basename(root)}/`")

        subindent = '  ' * (level + 1)
        for f in sorted(files):
            lines.append(f"{subindent}- `{f}`")
    return '\n'.join(lines)

def read_llm_markdown(base_path):
    root = Path(base_path)
    files = []

    # llm-instructions.md first, if exists
    llm_instructions = root / "llm-instructions.md"
    if llm_instructions.exists():
        files.append(llm_instructions)

    # All other llm-*.md files, excluding llm-instructions.md
    for md in sorted(root.glob("llm-*.md")):
        if md.name != "llm-instructions.md":
            files.append(md)

    contents = []
    for file in files:
        with open(file, 'r', encoding='utf-8') as f:
            contents.append(f"<!-- {file.name} -->\n" + f.read().strip())

    return "\n\n".join(contents)

def read_summary_md(base_path):
    summary_path = Path(base_path) / 'summary.md'
    if summary_path.is_file():
        with open(summary_path, 'r', encoding='utf-8') as f:
            return f"<!-- summary.md -->\n" + f.read().strip()
    return None

def read_todo_md(base_path):
    summary_path = Path(base_path) / 'TODO.md'
    if summary_path.is_file():
        with open(summary_path, 'r', encoding='utf-8') as f:
            return f"<!-- TODO.md -->\n" + f.read().strip()
    return None

def main():
    parser = argparse.ArgumentParser(description='Generate project file structure markdown for LLM input.')
    parser.add_argument('--file-structure', action='store_true', help='Include file structure markdown')
    parser.add_argument('--summary', action='store_true', help='Include summary.md and llm-*.md content if available')

    args = parser.parse_args()
    base_path = os.getcwd()
    output_sections = []

    spec = load_gitignore_patterns(base_path)

    if args.summary:
        llm_blocks = read_llm_markdown(base_path)
        summary_block = read_summary_md(base_path)
        todo_block = read_todo_md(base_path)

        if llm_blocks:
            output_sections.append(llm_blocks)
        if summary_block:
            output_sections.append(summary_block)

    if args.file_structure:
        file_structure = generate_file_structure(base_path, spec)
        output_sections.append("### File Structure\n" + file_structure)

    print('\n\n'.join(output_sections))

if __name__ == '__main__':
    main()
