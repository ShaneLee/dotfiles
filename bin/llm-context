#!/usr/bin/env python3

import os
import argparse

def generate_file_structure(base_path):
    lines = []
    for root, dirs, files in os.walk(base_path):
        # Ignore hidden files and dirs
        dirs[:] = [d for d in dirs if not d.startswith('.')]
        files = [f for f in files if not f.startswith('.')]

        level = root.replace(base_path, '').count(os.sep)
        indent = '  ' * level
        lines.append(f"{indent}- `{os.path.basename(root)}/`")
        subindent = '  ' * (level + 1)
        for f in sorted(files):
            lines.append(f"{subindent}- `{f}`")
    return '\n'.join(lines)

def read_summary(base_path):
    summary_path = os.path.join(base_path, 'summary.md')
    if os.path.isfile(summary_path):
        with open(summary_path, 'r', encoding='utf-8') as f:
            return f.read().strip()
    return None

def main():
    parser = argparse.ArgumentParser(description='Generate project file structure markdown for LLM input.')
    parser.add_argument('--file-structure', action='store_true', help='Include file structure markdown')
    parser.add_argument('--summary', action='store_true', help='Include summary.md content if available')

    args = parser.parse_args()
    base_path = os.getcwd()
    output_sections = []

    if args.summary:
        summary = read_summary(base_path)
        if summary:
            output_sections.append(summary)
        else:
            output_sections.append('_No summary.md found._')

    if args.file_structure:
        file_structure = generate_file_structure(base_path)
        output_sections.append("### File Structure\n" + file_structure)

    print('\n\n'.join(output_sections))

if __name__ == '__main__':
    main()
