alias killn='killAll NotificationCenter'
alias pip='pip3'
alias python='python3'
alias chrome="/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome"
alias mvn-dependency="mvn org.owasp:dependency-check-maven:check"
alias less="less -FXS" # Make less output stay in terminal after quitting
alias ta=tmux a
alias ij="open -a 'IntelliJ IDEA CE.app'"
alias code="open -a 'Visual Studio Code.app'"

if type rg &> /dev/null; then
  export FZF_DEFAULT_COMMAND='rg --files'
  export FZF_DEFAULT_OPTS='-m --height 50% --border'
fi

function gitthis {
  open "http://$(git remote get-url origin | cut -d '@' -f2 | tr ':' '/' |  sed 's/\.git$//')"
}

function ggu() {
  if [[ -z $1 ]] then
    uuidgen | tr '[:upper:]' '[:lower:]' | tr -d '\n'
  else
    for ((i=1;i<=$1;i++)); do
      uuidgen | tr '[:upper:]' '[:lower:]'
    done
  fi
}


# For some mad reason, ZSH fg doesn't do fg 1, you have to do
# fg %1 - this fixes that complete nonsense
function fg() {
	if [[ $# -eq 1 && $1 = - ]]; then
		builtin fg %-
	else
		builtin fg %"$@"
	fi
}

function mcdir {
  command mkdir $1 && cd $1
}

function newdesign() {
  cp ~/.bin/dotfiles/drawio-template.drawio $1
}

function ff() {
  vi $(fzf --multi | xargs)
}

IMPORT_MOTO_DIR="/Volumes/Colossus/6_Motorbike/"
IMPORT_G7XII_DIR="/Volumes/Colossus/7-pictures/cameras/canon-g7x-mkii/"

# Generate the name for the current import
function generate_import_folder() {
  [[ -z $1 ]] && echo "Must provide description with no spaces" && return
  local description=$1
  date_prefix="$(date "+%F" | sed 's/-//g')-"
  mkdir -pv "$IMPORT_MOTO_DIR$date_prefix$description"
  open "$IMPORT_MOTO_DIR$date_prefix$description"
}

function generate_canon_import_folder() {
  [[ -z $1 ]] && echo "Must provide description with no spaces" && return
  local description=$1
  date_prefix="$(date "+%F" | sed 's/-//g')-"
  mkdir -pv "$IMPORT_G7XII_DIR$date_prefix$description"
  open "$IMPORT_G7XII_DIR$date_prefix$description"
  echo "$IMPORT_G7XII_DIR$date_prefix$description"
}

# Import everything from GoPro and ZoomH1
function import_everything() {
  echo "importing from GoPro"
  import_gopro $1 &
  echo "importing from Zoom"
  import_zoom $1 &
  echo "importing from Canon G7x Mkii"
  import_canon_g7xii $1 &
}

function import_gopro() {
  folder=$(generate_import_folder $1)
}

function import_zoom() {
  folder=$(generate_import_folder $1)
  mv -v /Volumes/ZOOM/STEREO/FOLDER01/*.MP3 $folder
  compress_all $folder
}

function import_canon_g7xii() {
  folder=$(generate_canon_import_folder $1)
  echo $folder
  mv -v /Volumes/CANON_DC/DCIM/*/*.CR2 $folder
  mv -v /Volumes/CANON_DC/DCIM/*/*.MP4 $folder
  cd $folder
  #rename_shoot $1
  echo $1
  cd - 
}

# Compresses all the files in a directory
function compress_all() {
  local directory=$1
  if [[ ! -z $1 ]] then
    cd $directory
  else
    echo "No input directory provided using the current directory"
    directory=$(basename `pwd`)
  fi
  for audio_file in $(ls | grep MP3 | grep -v compressored); do
    echo "Compressing $audio_file"
    output=$(echo $directory"_compressored_$audio_file" | sed 's/ZOOM//g')
    ffmpeg -i $audio_file -af acompressor=threshold=-12dB:ratio=9:attack=200:release=1000 $output
  done
  [[ ! -z $1 ]] && cd -
}

# Adds a prefix to all files in a directory
function prefix_files() {
  for f in * ; do prefix_file $1 ; done
}

# Adds a prefix to a single file
function prefix_file() {
  mv -- "$f" "$1$f" 
}

# Rename all files and directories in the current dir
function rename_convention() {
   rename 's/\. /-/' * && rename 's/ /-/g' * && rename 's/_/-/g' * && rename --force 'y/A-Z/a-z/' *
}

function rename_shoot() {
   prefix_files $1
   rename_convention
}



function conda_init() {
  __conda_setup="$('/opt/homebrew/anaconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
  if [ $? -eq 0 ]; then
      eval "$__conda_setup"
  else
      if [ -f "/opt/homebrew/anaconda3/etc/profile.d/conda.sh" ]; then
          . "/opt/homebrew/anaconda3/etc/profile.d/conda.sh"
      else
          export PATH="/opt/homebrew/anaconda3/bin:$PATH"
      fi
  fi
  unset __conda_setup
}
